// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api/proto/jobworker.proto

package JobWorkerService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	JobWorker_StartJob_FullMethodName     = "/jobworker.JobWorker/StartJob"
	JobWorker_StopJob_FullMethodName      = "/jobworker.JobWorker/StopJob"
	JobWorker_GetJobStatus_FullMethodName = "/jobworker.JobWorker/GetJobStatus"
	JobWorker_GetJobOutput_FullMethodName = "/jobworker.JobWorker/GetJobOutput"
)

// JobWorkerClient is the client API for JobWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// JobWorker service provides methods to manage and monitor jobs.
type JobWorkerClient interface {
	// Starts a new job with the given command and resource limits.
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error)
	// Stops a running job identified by its ID.
	StopJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*StopJobResponse, error)
	// Retrieves the current status of a job.
	GetJobStatus(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*JobStatusResponse, error)
	// Streams the output of a job.
	GetJobOutput(ctx context.Context, in *JobOutputRequest, opts ...grpc.CallOption) (JobWorker_GetJobOutputClient, error)
}

type jobWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobWorkerClient(cc grpc.ClientConnInterface) JobWorkerClient {
	return &jobWorkerClient{cc}
}

func (c *jobWorkerClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*StartJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartJobResponse)
	err := c.cc.Invoke(ctx, JobWorker_StartJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerClient) StopJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*StopJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopJobResponse)
	err := c.cc.Invoke(ctx, JobWorker_StopJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerClient) GetJobStatus(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, JobWorker_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobWorkerClient) GetJobOutput(ctx context.Context, in *JobOutputRequest, opts ...grpc.CallOption) (JobWorker_GetJobOutputClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobWorker_ServiceDesc.Streams[0], JobWorker_GetJobOutput_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &jobWorkerGetJobOutputClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobWorker_GetJobOutputClient interface {
	Recv() (*JobOutputResponse, error)
	grpc.ClientStream
}

type jobWorkerGetJobOutputClient struct {
	grpc.ClientStream
}

func (x *jobWorkerGetJobOutputClient) Recv() (*JobOutputResponse, error) {
	m := new(JobOutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobWorkerServer is the server API for JobWorker service.
// All implementations must embed UnimplementedJobWorkerServer
// for forward compatibility
//
// JobWorker service provides methods to manage and monitor jobs.
type JobWorkerServer interface {
	// Starts a new job with the given command and resource limits.
	StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error)
	// Stops a running job identified by its ID.
	StopJob(context.Context, *JobId) (*StopJobResponse, error)
	// Retrieves the current status of a job.
	GetJobStatus(context.Context, *JobId) (*JobStatusResponse, error)
	// Streams the output of a job.
	GetJobOutput(*JobOutputRequest, JobWorker_GetJobOutputServer) error
	mustEmbedUnimplementedJobWorkerServer()
}

// UnimplementedJobWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedJobWorkerServer struct {
}

func (UnimplementedJobWorkerServer) StartJob(context.Context, *StartJobRequest) (*StartJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedJobWorkerServer) StopJob(context.Context, *JobId) (*StopJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedJobWorkerServer) GetJobStatus(context.Context, *JobId) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedJobWorkerServer) GetJobOutput(*JobOutputRequest, JobWorker_GetJobOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobOutput not implemented")
}
func (UnimplementedJobWorkerServer) mustEmbedUnimplementedJobWorkerServer() {}

// UnsafeJobWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobWorkerServer will
// result in compilation errors.
type UnsafeJobWorkerServer interface {
	mustEmbedUnimplementedJobWorkerServer()
}

func RegisterJobWorkerServer(s grpc.ServiceRegistrar, srv JobWorkerServer) {
	s.RegisterService(&JobWorker_ServiceDesc, srv)
}

func _JobWorker_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobWorker_StartJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorker_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobWorker_StopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServer).StopJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorker_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobWorkerServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobWorker_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobWorkerServer).GetJobStatus(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobWorker_GetJobOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobWorkerServer).GetJobOutput(m, &jobWorkerGetJobOutputServer{ServerStream: stream})
}

type JobWorker_GetJobOutputServer interface {
	Send(*JobOutputResponse) error
	grpc.ServerStream
}

type jobWorkerGetJobOutputServer struct {
	grpc.ServerStream
}

func (x *jobWorkerGetJobOutputServer) Send(m *JobOutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

// JobWorker_ServiceDesc is the grpc.ServiceDesc for JobWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobworker.JobWorker",
	HandlerType: (*JobWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _JobWorker_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobWorker_StopJob_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _JobWorker_GetJobStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobOutput",
			Handler:       _JobWorker_GetJobOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/jobworker.proto",
}
